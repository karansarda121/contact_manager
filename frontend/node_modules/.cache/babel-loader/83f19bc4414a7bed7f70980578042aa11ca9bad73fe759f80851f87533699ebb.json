{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\karan\\\\OneDrive\\\\Desktop\\\\mern-auth-dashboard\\\\frontend\\\\src\\\\components\\\\ShowContacts.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import API from \"../services/api\";\n\n// const ShowContacts = () => {\n//   const [contacts, setContacts] = useState([]);\n//   const [form, setForm] = useState({ name: \"\", mobile: \"\", email: \"\" });\n//   const [editingId, setEditingId] = useState(null);\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n\n//   // Fetch contacts from the backend\n//   const fetchContacts = async () => {\n//     try {\n//       const { data } = await API.get(\"/contacts\");\n//       setContacts(data);\n//     } catch (error) {\n//       alert(\"Failed to fetch contacts\");\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchContacts();\n//   }, []);\n\n//   // Handle form submission for adding or editing a contact\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       if (editingId) {\n//         // If editing, update the contact\n//         await API.put(`/contacts/${editingId}`, form);\n//         alert(\"Contact updated successfully\");\n//       } else {\n//         // If adding, create a new contact\n//         await API.post(\"/contacts\", form);\n//         alert(\"Contact added successfully\");\n//       }\n//       setForm({ name: \"\", mobile: \"\", email: \"\" });\n//       setEditingId(null);\n//       setIsModalOpen(false);\n//       fetchContacts(); // Refresh contact list\n//     } catch (error) {\n//       alert(\"Failed to save contact\");\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEdit = (contact) => {\n//     setForm(contact);\n//     setEditingId(contact._id);\n//     setIsModalOpen(true); // Open the modal for editing\n//   };\n\n//   // Handle delete button click\n//   const handleDelete = async (id) => {\n//     if (window.confirm(\"Are you sure you want to delete this contact?\")) {\n//       try {\n//         await API.delete(`/contacts/${id}`);\n//         alert(\"Contact deleted successfully\");\n//         fetchContacts(); // Refresh the list after deletion\n//       } catch (error) {\n//         alert(\"Failed to delete contact\");\n//       }\n//     }\n//   };\n\n//   // Close the modal without making any changes\n//   const closeModal = () => {\n//     setIsModalOpen(false);\n//     setForm({ name: \"\", mobile: \"\", email: \"\" });\n//     setEditingId(null); // Reset the editing state\n//   };\n\n//   return (\n//     <div className=\"show-contacts\">\n//       <h1>Show Contacts</h1>\n\n//       {/* List all contacts */}\n//       <ul>\n//         {contacts.map((contact) => (\n//           <li key={contact._id}>\n//             {contact.name} - {contact.mobile} - {contact.email}\n//             <button onClick={() => handleEdit(contact)}>Edit</button>\n//             <button onClick={() => handleDelete(contact._id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n\n//       {/* Modal for adding or editing a contact */}\n//       {isModalOpen && (\n//         <div className=\"modal-overlay\">\n//           <div className=\"modal\">\n//             <button className=\"close-btn\" onClick={closeModal}>\n//               âœ–\n//             </button>\n//             <h2>{editingId ? \"Edit\" : \"Add\"} Contact</h2>\n//             <form onSubmit={handleSubmit}>\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Name\"\n//                 value={form.name}\n//                 onChange={(e) => setForm({ ...form, name: e.target.value })}\n//               />\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Mobile\"\n//                 value={form.mobile}\n//                 onChange={(e) => setForm({ ...form, mobile: e.target.value })}\n//               />\n//               <input\n//                 type=\"email\"\n//                 placeholder=\"Email\"\n//                 value={form.email}\n//                 onChange={(e) => setForm({ ...form, email: e.target.value })}\n//               />\n//               <button type=\"submit\">\n//                 {editingId ? \"Update\" : \"Add\"} Contact\n//               </button>\n//             </form>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ShowContacts;\n\nimport React, { useEffect, useState } from \"react\";\nimport API from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShowContacts = () => {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch contacts from backend\n  const fetchContacts = async () => {\n    try {\n      const {\n        data\n      } = await API.get(\"/contacts\"); // Make sure the backend includes _id\n      setContacts(data);\n    } catch (error) {\n      alert(\"Failed to fetch contacts\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchContacts();\n  }, []);\n\n  // Delete contact by ID\n  const handleDelete = async id => {\n    if (window.confirm(\"Are you sure you want to delete this contact?\")) {\n      try {\n        await API.delete(`/contacts/${id}`); // Send ID to delete the contact\n        alert(\"Contact deleted successfully\");\n        fetchContacts(); // Refresh the contacts list\n      } catch (error) {\n        alert(\"Failed to delete contact\");\n      }\n    }\n  };\n\n  // Edit contact (this can open a modal or a form for updating)\n  const handleEdit = contact => {\n    // You can implement the modal or update form logic here\n    console.log(\"Edit contact:\", contact);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Show Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), contacts.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: contacts.map(contact => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: contact.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 15\n        }, this), \" - \", contact.mobile, \" -\", \" \", contact.email, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEdit(contact),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDelete(contact._id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 15\n        }, this)]\n      }, contact._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No contacts found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(ShowContacts, \"elFNGaiML5JdwC04DNMgFuykH4k=\");\n_c = ShowContacts;\nexport default ShowContacts;\nvar _c;\n$RefreshReg$(_c, \"ShowContacts\");","map":{"version":3,"names":["React","useEffect","useState","API","jsxDEV","_jsxDEV","ShowContacts","_s","contacts","setContacts","loading","setLoading","fetchContacts","data","get","error","alert","handleDelete","id","window","confirm","delete","handleEdit","contact","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","name","mobile","email","onClick","_id","_c","$RefreshReg$"],"sources":["C:/Users/karan/OneDrive/Desktop/mern-auth-dashboard/frontend/src/components/ShowContacts.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import API from \"../services/api\";\r\n\r\n// const ShowContacts = () => {\r\n//   const [contacts, setContacts] = useState([]);\r\n//   const [form, setForm] = useState({ name: \"\", mobile: \"\", email: \"\" });\r\n//   const [editingId, setEditingId] = useState(null);\r\n//   const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n//   // Fetch contacts from the backend\r\n//   const fetchContacts = async () => {\r\n//     try {\r\n//       const { data } = await API.get(\"/contacts\");\r\n//       setContacts(data);\r\n//     } catch (error) {\r\n//       alert(\"Failed to fetch contacts\");\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchContacts();\r\n//   }, []);\r\n\r\n//   // Handle form submission for adding or editing a contact\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     try {\r\n//       if (editingId) {\r\n//         // If editing, update the contact\r\n//         await API.put(`/contacts/${editingId}`, form);\r\n//         alert(\"Contact updated successfully\");\r\n//       } else {\r\n//         // If adding, create a new contact\r\n//         await API.post(\"/contacts\", form);\r\n//         alert(\"Contact added successfully\");\r\n//       }\r\n//       setForm({ name: \"\", mobile: \"\", email: \"\" });\r\n//       setEditingId(null);\r\n//       setIsModalOpen(false);\r\n//       fetchContacts(); // Refresh contact list\r\n//     } catch (error) {\r\n//       alert(\"Failed to save contact\");\r\n//     }\r\n//   };\r\n\r\n//   // Handle edit button click\r\n//   const handleEdit = (contact) => {\r\n//     setForm(contact);\r\n//     setEditingId(contact._id);\r\n//     setIsModalOpen(true); // Open the modal for editing\r\n//   };\r\n\r\n//   // Handle delete button click\r\n//   const handleDelete = async (id) => {\r\n//     if (window.confirm(\"Are you sure you want to delete this contact?\")) {\r\n//       try {\r\n//         await API.delete(`/contacts/${id}`);\r\n//         alert(\"Contact deleted successfully\");\r\n//         fetchContacts(); // Refresh the list after deletion\r\n//       } catch (error) {\r\n//         alert(\"Failed to delete contact\");\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   // Close the modal without making any changes\r\n//   const closeModal = () => {\r\n//     setIsModalOpen(false);\r\n//     setForm({ name: \"\", mobile: \"\", email: \"\" });\r\n//     setEditingId(null); // Reset the editing state\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"show-contacts\">\r\n//       <h1>Show Contacts</h1>\r\n\r\n//       {/* List all contacts */}\r\n//       <ul>\r\n//         {contacts.map((contact) => (\r\n//           <li key={contact._id}>\r\n//             {contact.name} - {contact.mobile} - {contact.email}\r\n//             <button onClick={() => handleEdit(contact)}>Edit</button>\r\n//             <button onClick={() => handleDelete(contact._id)}>Delete</button>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n\r\n//       {/* Modal for adding or editing a contact */}\r\n//       {isModalOpen && (\r\n//         <div className=\"modal-overlay\">\r\n//           <div className=\"modal\">\r\n//             <button className=\"close-btn\" onClick={closeModal}>\r\n//               âœ–\r\n//             </button>\r\n//             <h2>{editingId ? \"Edit\" : \"Add\"} Contact</h2>\r\n//             <form onSubmit={handleSubmit}>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 placeholder=\"Name\"\r\n//                 value={form.name}\r\n//                 onChange={(e) => setForm({ ...form, name: e.target.value })}\r\n//               />\r\n//               <input\r\n//                 type=\"text\"\r\n//                 placeholder=\"Mobile\"\r\n//                 value={form.mobile}\r\n//                 onChange={(e) => setForm({ ...form, mobile: e.target.value })}\r\n//               />\r\n//               <input\r\n//                 type=\"email\"\r\n//                 placeholder=\"Email\"\r\n//                 value={form.email}\r\n//                 onChange={(e) => setForm({ ...form, email: e.target.value })}\r\n//               />\r\n//               <button type=\"submit\">\r\n//                 {editingId ? \"Update\" : \"Add\"} Contact\r\n//               </button>\r\n//             </form>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ShowContacts;\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport API from \"../services/api\";\r\n\r\nconst ShowContacts = () => {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Fetch contacts from backend\r\n  const fetchContacts = async () => {\r\n    try {\r\n      const { data } = await API.get(\"/contacts\"); // Make sure the backend includes _id\r\n      setContacts(data);\r\n    } catch (error) {\r\n      alert(\"Failed to fetch contacts\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchContacts();\r\n  }, []);\r\n\r\n  // Delete contact by ID\r\n  const handleDelete = async (id) => {\r\n    if (window.confirm(\"Are you sure you want to delete this contact?\")) {\r\n      try {\r\n        await API.delete(`/contacts/${id}`); // Send ID to delete the contact\r\n        alert(\"Contact deleted successfully\");\r\n        fetchContacts(); // Refresh the contacts list\r\n      } catch (error) {\r\n        alert(\"Failed to delete contact\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Edit contact (this can open a modal or a form for updating)\r\n  const handleEdit = (contact) => {\r\n    // You can implement the modal or update form logic here\r\n    console.log(\"Edit contact:\", contact);\r\n  };\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n\r\n  return (\r\n    <div>\r\n      <h2>Show Contacts</h2>\r\n      {contacts.length > 0 ? (\r\n        <ul>\r\n          {contacts.map((contact) => (\r\n            <li key={contact._id}>\r\n              <strong>{contact.name}</strong> - {contact.mobile} -{\" \"}\r\n              {contact.email}\r\n              <button onClick={() => handleEdit(contact)}>Edit</button>\r\n              <button onClick={() => handleDelete(contact._id)}>Delete</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No contacts found.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowContacts;\r\n\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAMU,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMV,GAAG,CAACW,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;MAC7CL,WAAW,CAACI,IAAI,CAAC;IACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,KAAK,CAAC,0BAA0B,CAAC;IACnC,CAAC,SAAS;MACRL,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDV,SAAS,CAAC,MAAM;IACdW,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMK,YAAY,GAAG,MAAOC,EAAE,IAAK;IACjC,IAAIC,MAAM,CAACC,OAAO,CAAC,+CAA+C,CAAC,EAAE;MACnE,IAAI;QACF,MAAMjB,GAAG,CAACkB,MAAM,CAAC,aAAaH,EAAE,EAAE,CAAC,CAAC,CAAC;QACrCF,KAAK,CAAC,8BAA8B,CAAC;QACrCJ,aAAa,CAAC,CAAC,CAAC,CAAC;MACnB,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,KAAK,CAAC,0BAA0B,CAAC;MACnC;IACF;EACF,CAAC;;EAED;EACA,MAAMM,UAAU,GAAIC,OAAO,IAAK;IAC9B;IACAC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,OAAO,CAAC;EACvC,CAAC;EAED,IAAIb,OAAO,EAAE,oBAAOL,OAAA;IAAAqB,QAAA,EAAG;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAErC,oBACEzB,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrBtB,QAAQ,CAACuB,MAAM,GAAG,CAAC,gBAClB1B,OAAA;MAAAqB,QAAA,EACGlB,QAAQ,CAACwB,GAAG,CAAET,OAAO,iBACpBlB,OAAA;QAAAqB,QAAA,gBACErB,OAAA;UAAAqB,QAAA,EAASH,OAAO,CAACU;QAAI;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,OAAG,EAACP,OAAO,CAACW,MAAM,EAAC,IAAE,EAAC,GAAG,EACvDX,OAAO,CAACY,KAAK,eACd9B,OAAA;UAAQ+B,OAAO,EAAEA,CAAA,KAAMd,UAAU,CAACC,OAAO,CAAE;UAAAG,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACzDzB,OAAA;UAAQ+B,OAAO,EAAEA,CAAA,KAAMnB,YAAY,CAACM,OAAO,CAACc,GAAG,CAAE;UAAAX,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAJ1DP,OAAO,CAACc,GAAG;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKhB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,gBAELzB,OAAA;MAAAqB,QAAA,EAAG;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACzB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACvB,EAAA,CA5DID,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AA8DlB,eAAeA,YAAY;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}