{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import API from \"../services/api\";\n\n// const ShowContacts = () => {\n//   const [contacts, setContacts] = useState([]);\n//   const [form, setForm] = useState({ name: \"\", mobile: \"\", email: \"\" });\n//   const [editingId, setEditingId] = useState(null);\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n\n//   // Fetch contacts from the backend\n//   const fetchContacts = async () => {\n//     try {\n//       const { data } = await API.get(\"/contacts\");\n//       setContacts(data);\n//     } catch (error) {\n//       alert(\"Failed to fetch contacts\");\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchContacts();\n//   }, []);\n\n//   // Handle form submission for adding or editing a contact\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       if (editingId) {\n//         // If editing, update the contact\n//         await API.put(`/contacts/${editingId}`, form);\n//         alert(\"Contact updated successfully\");\n//       } else {\n//         // If adding, create a new contact\n//         await API.post(\"/contacts\", form);\n//         alert(\"Contact added successfully\");\n//       }\n//       setForm({ name: \"\", mobile: \"\", email: \"\" });\n//       setEditingId(null);\n//       setIsModalOpen(false);\n//       fetchContacts(); // Refresh contact list\n//     } catch (error) {\n//       alert(\"Failed to save contact\");\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEdit = (contact) => {\n//     setForm(contact);\n//     setEditingId(contact._id);\n//     setIsModalOpen(true); // Open the modal for editing\n//   };\n\n//   // Handle delete button click\n//   const handleDelete = async (id) => {\n//     if (window.confirm(\"Are you sure you want to delete this contact?\")) {\n//       try {\n//         await API.delete(`/contacts/${id}`);\n//         alert(\"Contact deleted successfully\");\n//         fetchContacts(); // Refresh the list after deletion\n//       } catch (error) {\n//         alert(\"Failed to delete contact\");\n//       }\n//     }\n//   };\n\n//   // Close the modal without making any changes\n//   const closeModal = () => {\n//     setIsModalOpen(false);\n//     setForm({ name: \"\", mobile: \"\", email: \"\" });\n//     setEditingId(null); // Reset the editing state\n//   };\n\n//   return (\n//     <div className=\"show-contacts\">\n//       <h1>Show Contacts</h1>\n\n//       {/* List all contacts */}\n//       <ul>\n//         {contacts.map((contact) => (\n//           <li key={contact._id}>\n//             {contact.name} - {contact.mobile} - {contact.email}\n//             <button onClick={() => handleEdit(contact)}>Edit</button>\n//             <button onClick={() => handleDelete(contact._id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n\n//       {/* Modal for adding or editing a contact */}\n//       {isModalOpen && (\n//         <div className=\"modal-overlay\">\n//           <div className=\"modal\">\n//             <button className=\"close-btn\" onClick={closeModal}>\n//               ✖\n//             </button>\n//             <h2>{editingId ? \"Edit\" : \"Add\"} Contact</h2>\n//             <form onSubmit={handleSubmit}>\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Name\"\n//                 value={form.name}\n//                 onChange={(e) => setForm({ ...form, name: e.target.value })}\n//               />\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Mobile\"\n//                 value={form.mobile}\n//                 onChange={(e) => setForm({ ...form, mobile: e.target.value })}\n//               />\n//               <input\n//                 type=\"email\"\n//                 placeholder=\"Email\"\n//                 value={form.email}\n//                 onChange={(e) => setForm({ ...form, email: e.target.value })}\n//               />\n//               <button type=\"submit\">\n//                 {editingId ? \"Update\" : \"Add\"} Contact\n//               </button>\n//             </form>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ShowContacts;","map":{"version":3,"names":[],"sources":["C:/Users/karan/OneDrive/Desktop/mern-auth-dashboard/frontend/src/components/ShowContacts.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import API from \"../services/api\";\r\n\r\n// const ShowContacts = () => {\r\n//   const [contacts, setContacts] = useState([]);\r\n//   const [form, setForm] = useState({ name: \"\", mobile: \"\", email: \"\" });\r\n//   const [editingId, setEditingId] = useState(null);\r\n//   const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n//   // Fetch contacts from the backend\r\n//   const fetchContacts = async () => {\r\n//     try {\r\n//       const { data } = await API.get(\"/contacts\");\r\n//       setContacts(data);\r\n//     } catch (error) {\r\n//       alert(\"Failed to fetch contacts\");\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchContacts();\r\n//   }, []);\r\n\r\n//   // Handle form submission for adding or editing a contact\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     try {\r\n//       if (editingId) {\r\n//         // If editing, update the contact\r\n//         await API.put(`/contacts/${editingId}`, form);\r\n//         alert(\"Contact updated successfully\");\r\n//       } else {\r\n//         // If adding, create a new contact\r\n//         await API.post(\"/contacts\", form);\r\n//         alert(\"Contact added successfully\");\r\n//       }\r\n//       setForm({ name: \"\", mobile: \"\", email: \"\" });\r\n//       setEditingId(null);\r\n//       setIsModalOpen(false);\r\n//       fetchContacts(); // Refresh contact list\r\n//     } catch (error) {\r\n//       alert(\"Failed to save contact\");\r\n//     }\r\n//   };\r\n\r\n//   // Handle edit button click\r\n//   const handleEdit = (contact) => {\r\n//     setForm(contact);\r\n//     setEditingId(contact._id);\r\n//     setIsModalOpen(true); // Open the modal for editing\r\n//   };\r\n\r\n//   // Handle delete button click\r\n//   const handleDelete = async (id) => {\r\n//     if (window.confirm(\"Are you sure you want to delete this contact?\")) {\r\n//       try {\r\n//         await API.delete(`/contacts/${id}`);\r\n//         alert(\"Contact deleted successfully\");\r\n//         fetchContacts(); // Refresh the list after deletion\r\n//       } catch (error) {\r\n//         alert(\"Failed to delete contact\");\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   // Close the modal without making any changes\r\n//   const closeModal = () => {\r\n//     setIsModalOpen(false);\r\n//     setForm({ name: \"\", mobile: \"\", email: \"\" });\r\n//     setEditingId(null); // Reset the editing state\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"show-contacts\">\r\n//       <h1>Show Contacts</h1>\r\n\r\n//       {/* List all contacts */}\r\n//       <ul>\r\n//         {contacts.map((contact) => (\r\n//           <li key={contact._id}>\r\n//             {contact.name} - {contact.mobile} - {contact.email}\r\n//             <button onClick={() => handleEdit(contact)}>Edit</button>\r\n//             <button onClick={() => handleDelete(contact._id)}>Delete</button>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n\r\n//       {/* Modal for adding or editing a contact */}\r\n//       {isModalOpen && (\r\n//         <div className=\"modal-overlay\">\r\n//           <div className=\"modal\">\r\n//             <button className=\"close-btn\" onClick={closeModal}>\r\n//               ✖\r\n//             </button>\r\n//             <h2>{editingId ? \"Edit\" : \"Add\"} Contact</h2>\r\n//             <form onSubmit={handleSubmit}>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 placeholder=\"Name\"\r\n//                 value={form.name}\r\n//                 onChange={(e) => setForm({ ...form, name: e.target.value })}\r\n//               />\r\n//               <input\r\n//                 type=\"text\"\r\n//                 placeholder=\"Mobile\"\r\n//                 value={form.mobile}\r\n//                 onChange={(e) => setForm({ ...form, mobile: e.target.value })}\r\n//               />\r\n//               <input\r\n//                 type=\"email\"\r\n//                 placeholder=\"Email\"\r\n//                 value={form.email}\r\n//                 onChange={(e) => setForm({ ...form, email: e.target.value })}\r\n//               />\r\n//               <button type=\"submit\">\r\n//                 {editingId ? \"Update\" : \"Add\"} Contact\r\n//               </button>\r\n//             </form>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ShowContacts;\r\n\r\n\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}