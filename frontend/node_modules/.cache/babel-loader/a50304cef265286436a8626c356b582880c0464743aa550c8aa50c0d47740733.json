{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\karan\\\\OneDrive\\\\Desktop\\\\mern-auth-dashboard\\\\frontend\\\\src\\\\components\\\\ShowContacts.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import API from \"../services/api\"; // Import the API instance\n\n// const ShowContacts = () => {\n//   const [contacts, setContacts] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   // Fetch contacts from the backend\n//   const fetchContacts = async () => {\n//     try {\n//       const token = localStorage.getItem(\"token\"); // Replace with your token storage mechanism\n//       const response = await API.get(\"/contacts\");\n//       setContacts(response.data.data || response.data); // Adjust based on backend response\n//       setLoading(false);\n//     } catch (err) {\n//       setError(\"Failed to fetch contacts. Please try again.\");\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchContacts();\n//   }, []);\n\n//   if (loading) return <p>Loading contacts...</p>;\n//   if (error) return <p>{error}</p>;\n\n//   return (\n//     <div style={{ padding: \"20px\", maxWidth: \"600px\", margin: \"auto\" }}>\n//       <h2 style={{ textAlign: \"center\", marginBottom: \"20px\" }}>\n//         Your Contacts\n//       </h2>\n//       {contacts.length > 0 ? (\n//         <table style={{ width: \"100%\", borderCollapse: \"collapse\" }}>\n//           <thead>\n//             <tr style={{ backgroundColor: \"#f4f4f4\", textAlign: \"left\" }}>\n//               <th style={{ padding: \"10px\", borderBottom: \"1px solid #ccc\" }}>\n//                 Name\n//               </th>\n//               <th style={{ padding: \"10px\", borderBottom: \"1px solid #ccc\" }}>\n//                 Mobile\n//               </th>\n//               <th style={{ padding: \"10px\", borderBottom: \"1px solid #ccc\" }}>\n//                 Email\n//               </th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {contacts.map((contact) => (\n//               <tr key={contact._id}>\n//                 <td style={{ padding: \"10px\", borderBottom: \"1px solid #ccc\" }}>\n//                   {contact.name}\n//                 </td>\n//                 <td style={{ padding: \"10px\", borderBottom: \"1px solid #ccc\" }}>\n//                   {contact.mobile}\n//                 </td>\n//                 <td style={{ padding: \"10px\", borderBottom: \"1px solid #ccc\" }}>\n//                   {contact.email}\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>No contacts found.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ShowContacts;\n\nimport React, { useEffect, useState } from \"react\";\nimport API from \"../services/api\";\nimport Modal from \"react-modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst ShowContacts = () => {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [form, setForm] = useState({\n    name: \"\",\n    mobile: \"\",\n    email: \"\"\n  });\n  const [editingId, setEditingId] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // Fetch contacts from the backend\n  const fetchContacts = async () => {\n    try {\n      const {\n        data\n      } = await API.get(\"/contacts\");\n      setContacts(data);\n    } catch (error) {\n      alert(\"Failed to fetch contacts\");\n    }\n  };\n  useEffect(() => {\n    fetchContacts();\n  }, []);\n\n  // Handle form submission for adding or editing a contact\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      if (editingId) {\n        await API.put(`/contacts/${editingId}`, form); // Edit contact\n        alert(\"Contact updated successfully\");\n      } else {\n        await API.post(\"/contacts\", form); // Add new contact\n        alert(\"Contact added successfully\");\n      }\n      setForm({\n        name: \"\",\n        mobile: \"\",\n        email: \"\"\n      }); // Clear form\n      setEditingId(null); // Reset editing state\n      setIsModalOpen(false); // Close modal\n      fetchContacts(); // Refresh contacts list\n    } catch (error) {\n      alert(\"Failed to save contact\");\n    }\n  };\n\n  // Handle edit button click (opens the modal with pre-filled data)\n  const handleEdit = contact => {\n    setForm(contact); // Populate the form with contact data\n    setEditingId(contact._id); // Set the editing ID\n    setIsModalOpen(true); // Open the modal\n  };\n\n  // Handle delete button click\n  const handleDelete = async id => {\n    try {\n      await API.delete(`/contacts/${id}`); // Delete contact\n      alert(\"Contact deleted successfully\");\n      fetchContacts(); // Refresh contacts list\n    } catch (error) {\n      alert(\"Failed to delete contact\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"show-contacts\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Show Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: contacts.map(contact => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [contact.name, \" - \", contact.mobile, \" - \", contact.email]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEdit(contact),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDelete(contact._id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)]\n      }, contact._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      contentLabel: \"Edit Contact\",\n      className: \"modal\",\n      overlayClassName: \"modal-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Name\",\n          value: form.name,\n          onChange: e => setForm({\n            ...form,\n            name: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Mobile\",\n          value: form.mobile,\n          onChange: e => setForm({\n            ...form,\n            mobile: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Email\",\n          value: form.email,\n          onChange: e => setForm({\n            ...form,\n            email: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Update Contact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsModalOpen(false),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(ShowContacts, \"GhWMYp95clgsOKhEtN7Nwp0Y1CM=\");\n_c = ShowContacts;\nexport default ShowContacts;\nvar _c;\n$RefreshReg$(_c, \"ShowContacts\");","map":{"version":3,"names":["React","useEffect","useState","API","Modal","jsxDEV","_jsxDEV","setAppElement","ShowContacts","_s","contacts","setContacts","form","setForm","name","mobile","email","editingId","setEditingId","isModalOpen","setIsModalOpen","fetchContacts","data","get","error","alert","handleSubmit","e","preventDefault","put","post","handleEdit","contact","_id","handleDelete","id","delete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","isOpen","onRequestClose","contentLabel","overlayClassName","onSubmit","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["C:/Users/karan/OneDrive/Desktop/mern-auth-dashboard/frontend/src/components/ShowContacts.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import API from \"../services/api\"; // Import the API instance\r\n\r\n// const ShowContacts = () => {\r\n//   const [contacts, setContacts] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   // Fetch contacts from the backend\r\n//   const fetchContacts = async () => {\r\n//     try {\r\n//       const token = localStorage.getItem(\"token\"); // Replace with your token storage mechanism\r\n//       const response = await API.get(\"/contacts\");\r\n//       setContacts(response.data.data || response.data); // Adjust based on backend response\r\n//       setLoading(false);\r\n//     } catch (err) {\r\n//       setError(\"Failed to fetch contacts. Please try again.\");\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchContacts();\r\n//   }, []);\r\n\r\n//   if (loading) return <p>Loading contacts...</p>;\r\n//   if (error) return <p>{error}</p>;\r\n\r\n//   return (\r\n//     <div style={{ padding: \"20px\", maxWidth: \"600px\", margin: \"auto\" }}>\r\n//       <h2 style={{ textAlign: \"center\", marginBottom: \"20px\" }}>\r\n//         Your Contacts\r\n//       </h2>\r\n//       {contacts.length > 0 ? (\r\n//         <table style={{ width: \"100%\", borderCollapse: \"collapse\" }}>\r\n//           <thead>\r\n//             <tr style={{ backgroundColor: \"#f4f4f4\", textAlign: \"left\" }}>\r\n//               <th style={{ padding: \"10px\", borderBottom: \"1px solid #ccc\" }}>\r\n//                 Name\r\n//               </th>\r\n//               <th style={{ padding: \"10px\", borderBottom: \"1px solid #ccc\" }}>\r\n//                 Mobile\r\n//               </th>\r\n//               <th style={{ padding: \"10px\", borderBottom: \"1px solid #ccc\" }}>\r\n//                 Email\r\n//               </th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {contacts.map((contact) => (\r\n//               <tr key={contact._id}>\r\n//                 <td style={{ padding: \"10px\", borderBottom: \"1px solid #ccc\" }}>\r\n//                   {contact.name}\r\n//                 </td>\r\n//                 <td style={{ padding: \"10px\", borderBottom: \"1px solid #ccc\" }}>\r\n//                   {contact.mobile}\r\n//                 </td>\r\n//                 <td style={{ padding: \"10px\", borderBottom: \"1px solid #ccc\" }}>\r\n//                   {contact.email}\r\n//                 </td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//       ) : (\r\n//         <p>No contacts found.</p>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ShowContacts;\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport API from \"../services/api\";\r\nimport Modal from \"react-modal\";\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nconst ShowContacts = () => {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [form, setForm] = useState({ name: \"\", mobile: \"\", email: \"\" });\r\n  const [editingId, setEditingId] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  // Fetch contacts from the backend\r\n  const fetchContacts = async () => {\r\n    try {\r\n      const { data } = await API.get(\"/contacts\");\r\n      setContacts(data);\r\n    } catch (error) {\r\n      alert(\"Failed to fetch contacts\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchContacts();\r\n  }, []);\r\n\r\n  // Handle form submission for adding or editing a contact\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      if (editingId) {\r\n        await API.put(`/contacts/${editingId}`, form); // Edit contact\r\n        alert(\"Contact updated successfully\");\r\n      } else {\r\n        await API.post(\"/contacts\", form); // Add new contact\r\n        alert(\"Contact added successfully\");\r\n      }\r\n      setForm({ name: \"\", mobile: \"\", email: \"\" }); // Clear form\r\n      setEditingId(null); // Reset editing state\r\n      setIsModalOpen(false); // Close modal\r\n      fetchContacts(); // Refresh contacts list\r\n    } catch (error) {\r\n      alert(\"Failed to save contact\");\r\n    }\r\n  };\r\n\r\n  // Handle edit button click (opens the modal with pre-filled data)\r\n  const handleEdit = (contact) => {\r\n    setForm(contact); // Populate the form with contact data\r\n    setEditingId(contact._id); // Set the editing ID\r\n    setIsModalOpen(true); // Open the modal\r\n  };\r\n\r\n  // Handle delete button click\r\n  const handleDelete = async (id) => {\r\n    try {\r\n      await API.delete(`/contacts/${id}`); // Delete contact\r\n      alert(\"Contact deleted successfully\");\r\n      fetchContacts(); // Refresh contacts list\r\n    } catch (error) {\r\n      alert(\"Failed to delete contact\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"show-contacts\">\r\n      <h1>Show Contacts</h1>\r\n      <ul>\r\n        {contacts.map((contact) => (\r\n          <li key={contact._id}>\r\n            <span>\r\n              {contact.name} - {contact.mobile} - {contact.email}\r\n            </span>\r\n            <button onClick={() => handleEdit(contact)}>Edit</button>\r\n            <button onClick={() => handleDelete(contact._id)}>Delete</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {/* Modal for editing contact */}\r\n      <Modal\r\n        isOpen={isModalOpen}\r\n        onRequestClose={() => setIsModalOpen(false)}\r\n        contentLabel=\"Edit Contact\"\r\n        className=\"modal\"\r\n        overlayClassName=\"modal-overlay\"\r\n      >\r\n        <h2>Edit Contact</h2>\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Name\"\r\n            value={form.name}\r\n            onChange={(e) => setForm({ ...form, name: e.target.value })}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Mobile\"\r\n            value={form.mobile}\r\n            onChange={(e) => setForm({ ...form, mobile: e.target.value })}\r\n          />\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Email\"\r\n            value={form.email}\r\n            onChange={(e) => setForm({ ...form, email: e.target.value })}\r\n          />\r\n          <button type=\"submit\">Update Contact</button>\r\n        </form>\r\n        <button onClick={() => setIsModalOpen(false)}>Cancel</button>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowContacts;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}